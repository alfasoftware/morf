/* Copyright 2017 Alfa Financial Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.alfasoftware.morf.jdbc.nuodb;

import static org.alfasoftware.morf.sql.SqlUtils.parameter;
import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.alfasoftware.morf.jdbc.AbstractSqlDialectTest;
import org.alfasoftware.morf.jdbc.NamedParameterPreparedStatement;
import org.alfasoftware.morf.jdbc.SqlDialect;
import org.alfasoftware.morf.jdbc.SqlScriptExecutor;
import org.alfasoftware.morf.metadata.DataType;
import org.alfasoftware.morf.metadata.SchemaUtils;
import org.alfasoftware.morf.sql.SelectStatement;
import org.alfasoftware.morf.sql.element.SqlParameter;
import org.mockito.ArgumentCaptor;

import com.google.common.collect.ImmutableList;

/**
 * Tests SQL statements generated for NuoDB.
 * Currently NuoDB can return the result of numeric
 * expression as a non-numeric type. This is why
 * NuoDB specific overrides can contain multiple CAST expressions.
 *
 * @author Copyright (c) Alfa Financial Software 2016
 */
public class TestNuoDBDialect extends AbstractSqlDialectTest {

  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#createTestDialect()
   */
  @Override
  protected SqlDialect createTestDialect() {
    return new NuoDBDialect("SCM");
  }

  @Override
  protected String tableName(String baseName) {
    return "SCM." + baseName;
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedCreateTableStatements()
   */
  @Override
  protected List<String> expectedCreateTableStatements() {
    return Arrays
        .asList(
          "CREATE TABLE SCM.Test (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3), intField INTEGER, floatField DECIMAL(13,2) NOT NULL, dateField DATE, booleanField SMALLINT, charField VARCHAR(1), blobField BLOB, bigIntegerField BIGINT DEFAULT 12345, clobField CLOB, PRIMARY KEY (id))",
          "DROP INDEX IF EXISTS SCM.Test_NK",
          "CREATE UNIQUE INDEX Test_NK ON SCM.Test (stringField)",
          "DROP INDEX IF EXISTS SCM.Test_1",
          "CREATE INDEX Test_1 ON SCM.Test (intField,floatField)",
          "CREATE TABLE SCM.Alternate (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3), PRIMARY KEY (id))",
          "DROP INDEX IF EXISTS SCM.Alternate_1",
          "CREATE INDEX Alternate_1 ON SCM.Alternate (stringField)",
          "CREATE TABLE SCM.NonNull (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3) NOT NULL, intField DECIMAL(8,0) NOT NULL, booleanField SMALLINT NOT NULL, dateField DATE NOT NULL, blobField BLOB NOT NULL, PRIMARY KEY (id))",
          "CREATE TABLE SCM.CompositePrimaryKey (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3) NOT NULL, secondPrimaryKey VARCHAR(3) NOT NULL, PRIMARY KEY (id, secondPrimaryKey))",
          "DROP SEQUENCE IF EXISTS SCM.AutoNumber_IDS_5",
          "CREATE SEQUENCE SCM.AutoNumber_IDS_5 START WITH 5",
          "CREATE TABLE SCM.AutoNumber (intField BIGINT GENERATED BY DEFAULT AS IDENTITY(AutoNumber_IDS_5), PRIMARY KEY (intField))"
        );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedCreateTableStatements()
   */
  @Override
  protected List<String> expectedCreateTemporaryTableStatements() {
    return Arrays
        .asList(
          "CREATE TEMPORARY TABLE TEMP_TempTest (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3), intField INTEGER, floatField DECIMAL(13,2) NOT NULL, dateField DATE, booleanField SMALLINT, charField VARCHAR(1), blobField BLOB, bigIntegerField BIGINT DEFAULT 12345, clobField CLOB, PRIMARY KEY (id))",
          "DROP INDEX IF EXISTS TempTest_NK",
          "CREATE UNIQUE INDEX TempTest_NK ON TEMP_TempTest (stringField)",
          "DROP INDEX IF EXISTS TempTest_1",
          "CREATE INDEX TempTest_1 ON TEMP_TempTest (intField,floatField)",
          "CREATE TEMPORARY TABLE TEMP_TempAlternate (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3), PRIMARY KEY (id))",
          "DROP INDEX IF EXISTS TempAlternate_1",
          "CREATE INDEX TempAlternate_1 ON TEMP_TempAlternate (stringField)",
          "CREATE TEMPORARY TABLE TEMP_TempNonNull (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3) NOT NULL, intField DECIMAL(8,0) NOT NULL, booleanField SMALLINT NOT NULL, dateField DATE NOT NULL, blobField BLOB NOT NULL, PRIMARY KEY (id))"
          );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedCreateTableStatementsWithLongTableName()
   */
  @Override
  protected List<String> expectedCreateTableStatementsWithLongTableName() {
    return Arrays
        .asList("CREATE TABLE "
            + "SCM."+ TABLE_WITH_VERY_LONG_NAME
            + " (id BIGINT NOT NULL, version INTEGER DEFAULT 0, stringField VARCHAR(3), intField DECIMAL(8,0), floatField DECIMAL(13,2) NOT NULL, dateField DATE, booleanField SMALLINT, charField VARCHAR(1), PRIMARY KEY (id))",
            "DROP INDEX IF EXISTS SCM.Test_NK",
            "CREATE UNIQUE INDEX Test_NK ON SCM." + TABLE_WITH_VERY_LONG_NAME + " (stringField)",
            "DROP INDEX IF EXISTS SCM.Test_1",
            "CREATE INDEX Test_1 ON SCM." + TABLE_WITH_VERY_LONG_NAME + " (intField,floatField)"
        );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDropTableStatements()
   */
  @Override
  protected List<String> expectedDropTableStatements() {
    return Arrays.asList("drop table SCM.Test", "DROP INDEX IF EXISTS SCM.Test_NK", "DROP INDEX IF EXISTS SCM.Test_1");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDropTempTableStatements()
   */
  @Override
  protected List<String> expectedDropTempTableStatements() {
    return Arrays.asList("drop table TEMP_TempTest", "DROP INDEX IF EXISTS TempTest_NK", "DROP INDEX IF EXISTS TempTest_1");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedTruncateTableStatements()
   */
  @Override
  protected List<String> expectedTruncateTableStatements() {
    return Arrays.asList("TRUNCATE TABLE SCM.Test");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedTruncateTempTableStatements()
   */
  @Override
  protected List<String> expectedTruncateTempTableStatements() {
    return Arrays.asList("TRUNCATE TABLE TEMP_TempTest"); // no schema because is temporary
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDeleteAllFromTableStatements()
   */
  @Override
  protected List<String> expectedDeleteAllFromTableStatements() {
    return Arrays.asList("DELETE FROM SCM.Test");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedParameterisedInsertStatement()
   */
  @Override
  protected String expectedParameterisedInsertStatement() {
    return "INSERT INTO SCM.Test (id, version, stringField, intField, floatField, dateField, booleanField, charField, blobField, bigIntegerField, clobField) VALUES (5, :version, 'Escap''d', 7, :floatField, 20100405, 1, :charField, :blobField, :bigIntegerField, :clobField)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedParameterisedInsertStatementWithTableInDifferentSchema()
   */
  @Override
  protected String expectedParameterisedInsertStatementWithTableInDifferentSchema() {
    return "INSERT INTO MYSCHEMA.Test (id, version, stringField, intField, floatField, dateField, booleanField, charField, blobField, bigIntegerField, clobField) VALUES (5, :version, 'Escap''d', 7, :floatField, 20100405, 1, :charField, :blobField, :bigIntegerField, :clobField)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAutoGenerateIdStatement()
   */
  @Override
  protected List<String> expectedAutoGenerateIdStatement() {
    return ImmutableList.of(
      "DELETE FROM idvalues where name = 'Test'",
      "INSERT INTO idvalues (name, value) VALUES('Test', (SELECT COALESCE(MAX(id) + 1, 1) AS CurrentValue FROM SCM.Test))",
      "INSERT INTO SCM.Test (version, stringField, id) SELECT version, stringField, (SELECT COALESCE(value, 0) FROM SCM.idvalues WHERE (name = 'Test')) + Other.id FROM SCM.Other"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedInsertWithIdAndVersion()
   */
  @Override
  protected List<String> expectedInsertWithIdAndVersion() {
    return Arrays.asList(
      "DELETE FROM idvalues where name = 'Test'",
      "INSERT INTO idvalues (name, value) VALUES('Test', (SELECT COALESCE(MAX(id) + 1, 1) AS CurrentValue FROM SCM.Test))",
      "INSERT INTO SCM.Test (stringField, id, version) SELECT stringField, (SELECT COALESCE(value, 0) FROM SCM.idvalues WHERE (name = 'Test')) + Other.id, 0 AS version FROM SCM.Other"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#verifyPostInsertStatementsInsertingUnderAutonumLimit(org.alfasoftware.morf.jdbc.SqlScriptExecutor, com.mysql.jdbc.Connection)
   */
  @Override
  protected void verifyPostInsertStatementsInsertingUnderAutonumLimit(SqlScriptExecutor sqlScriptExecutor, Connection connection) {
//  throw new RuntimeException("need to implement");    //FIXME Nuo support in progress
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#verifyRepairAutoNumberStartPosition(org.alfasoftware.morf.jdbc.SqlScriptExecutor, com.mysql.jdbc.Connection)
   */
  @Override
  protected void verifyRepairAutoNumberStartPosition(SqlScriptExecutor sqlScriptExecutor, Connection connection) {
//  throw new RuntimeException("need to implement");    //FIXME Nuo support in progress
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#verifyPostInsertStatementsNotInsertingUnderAutonumLimit(org.alfasoftware.morf.jdbc.SqlScriptExecutor, com.mysql.jdbc.Connection)
   */
  @Override
  protected void verifyPostInsertStatementsNotInsertingUnderAutonumLimit(SqlScriptExecutor sqlScriptExecutor, Connection connection) {
//  throw new RuntimeException("need to implement");    //FIXME Nuo support in progress
  }


  /**
   * Returns decimal representation of a literal for testing
   */
  @Override
  protected String expectedSelectMinimumWithExpression() {
    return "SELECT MIN(intField - 1) FROM " + tableName("Test");
  }


  /**
   * Returns expected SQL for math operation 1
   */
  @Override
  protected String expectedSqlForMathOperations1() {
    return "a / b + c";
  }


  /**
   * Returns expected SQL for math operation 2
   */
  @Override
  protected String expectedSqlForMathOperations2() {
    return "a / b + 100";
  }


  /**
   * Returns expected SQL for math operation 3
   */
  @Override
  protected String expectedSqlForMathOperations3() {
    return "a / (b + c)";
  }


  /**
   * Returns expected SQL for math operation 4
   */
  @Override
  protected String expectedSqlForMathOperations4() {
    return "a / (b + 100)";
  }


  /**
   * Returns expected SQL for math operation 5
   */
  @Override
  protected String expectedSqlForMathOperations5() {
    return "a * (b + c)";
  }


  /**
   * Returns expected SQL for math operation 6
   */
  @Override
  protected String expectedSqlForMathOperations6() {
    return "a + b / (c - d)";
  }


  /**
   * Returns expected SQL for math operation 7
   */
  @Override
  protected String expectedSqlForMathOperations7() {
    return "(a + b) / (c - d)";
  }


  /**
   * Returns expected SQL for math operation 8
   */
  @Override
  protected String expectedSqlForMathOperations8() {
    return "a + b + c + d + e";
  }


  /**
   * Returns expected SQL for math operation 9
   */
  @Override
  protected String expectedSqlForMathOperations9() {
    return "a + b + (c / d) + e + 100 + f / 5";
  }


  /**
   * Returns expected SQL for math operation 10
   */
  @Override
  protected String expectedSqlForMathOperations10() {
    return "(a + b + (c / d) + e + 100 + f) / 5";
  }


  /**
   * Returns expected SQL for math operation 11
   */
  @Override
  protected String expectedSqlForMathOperations11() {
    return "(a / 100 + 1) / b + 100";
  }


  /**
   * Returns expected SQL for math operation 12
   */
  @Override
  protected String expectedSqlForMathOperations12() {
    return "(a + b) / c";
  }


  /**
   * Returns expected SQL for math operation 13
   */
  @Override
  protected String expectedSqlForMathOperations13() {
    return "a + b + c / 2";
  }


  /**
   * Returns expected SQL for math operation 14
   */
  @Override
  protected String expectedSqlForMathOperations14() {
    return "a + (b + c) / 2";
  }


  /**
   * Returns expected SQL for math operation 15
   */
  @Override
  protected String expectedSqlForMathOperations15() {
    return "a + (b + c) / 2";
  }


  /**
   * Returns expected SQL for math operation for existing data fix 1
   */
  @Override
  protected String expectedSqlForMathOperationsForExistingDataFix1() {
    return "ROUND(doublevalue / 1000 * doublevalue, 2)";
  }



  /**
   * Returns expected SQL for math operation for existing data fix 2
   */
  @Override
  protected String expectedSqlForMathOperationsForExistingDataFix2(String sqlForRandom) {
    return "FLOOR(" + sqlForRandom + " * " + expectedDecimalRepresentationOfLiteral("999999.0") + ")";
  }



  /**
   * Returns expected SQL for math operation for existing data fix 3
   */
  @Override
  protected String expectedSqlForMathOperationsForExistingDataFix3() {
    return "MAX(assetLocationDate * 100000 + assetLocationTime)";
  }


  /**
   * Returns expected SQL for math operation for existing data fix 4
   */
  @Override
  protected String expectedSqlForMathOperationsForExistingDataFix4() {
    return "invoiceLineReceived * vatRate / (vatRate + 100)";
  }


  /**
   * Returns decimal representation of a literal for testing
   */
  @Override
  protected String expectedSelectSumWithExpression() {
    return "SELECT SUM(intField * 2 / 3) FROM " + tableName("Test");
  }


  /**
   * Returns expected SQL for Insert Into Values With Complex Field
   */
  @Override
  protected List<String> expectedSqlInsertIntoValuesWithComplexField() {
    return Arrays.asList("INSERT INTO " + tableName("TableOne") + " (id, value) VALUES (3, 1 + 2)");
  }


  /**
   * Returns decimal representation of a literal for testing
   */
  @Override
  protected String expectedSelectMaximumWithExpression() {
    return "SELECT MAX(intField + 1) FROM " + tableName("Test");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSpecifiedValueInsert()
   */
  @Override
  protected List<String> expectedSpecifiedValueInsert() {
    return Arrays.asList(
      "DELETE FROM idvalues where name = 'Test'",
      "INSERT INTO idvalues (name, value) VALUES('Test', (SELECT COALESCE(MAX(id) + 1, 1) AS CurrentValue FROM SCM.Test))",
      "INSERT INTO SCM.Test (stringField, intField, floatField, dateField, booleanField, charField, id, version, blobField, bigIntegerField, clobField) VALUES ('Escap''d', 7, 11.25, 20100405, 1, 'X', (SELECT COALESCE(value, 1) FROM SCM.idvalues WHERE (name = 'Test')), 0, null, 12345, null)"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSpecifiedValueInsertWithTableInDifferentSchema()
   */
  @Override
  protected List<String> expectedSpecifiedValueInsertWithTableInDifferentSchema() {
    return Arrays.asList(
      "DELETE FROM idvalues where name = 'Test'",
      "INSERT INTO idvalues (name, value) VALUES('Test', (SELECT COALESCE(MAX(id) + 1, 1) AS CurrentValue FROM MYSCHEMA.Test))",
      "INSERT INTO MYSCHEMA.Test (stringField, intField, floatField, dateField, booleanField, charField, id, version, blobField, bigIntegerField, clobField) VALUES ('Escap''d', 7, 11.25, 20100405, 1, 'X', (SELECT COALESCE(value, 1) FROM SCM.idvalues WHERE (name = 'Test')), 0, null, 12345, null)"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedParameterisedInsertStatementWithNoColumnValues()
   */
  @Override
  protected String expectedParameterisedInsertStatementWithNoColumnValues() {
    return "INSERT INTO SCM.Test (id, version, stringField, intField, floatField, dateField, booleanField, charField, blobField, bigIntegerField, clobField) VALUES (:id, :version, :stringField, :intField, :floatField, :dateField, :booleanField, :charField, :blobField, :bigIntegerField, :clobField)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedEmptyStringInsertStatement()
   */
  @Override
  protected String expectedEmptyStringInsertStatement() {
    return "INSERT INTO SCM.Test (stringField, id, version, intField, floatField, dateField, booleanField, charField, blobField, bigIntegerField, clobField) VALUES (NULL, (SELECT COALESCE(value, 1) FROM SCM.idvalues WHERE (name = 'Test')), 0, 0, 0, null, 0, NULL, null, 12345, null)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedConcatenationWithCase()
   */
  @Override
  protected String expectedConcatenationWithCase() {
    return "SELECT COALESCE(assetDescriptionLine1,'') || COALESCE(CASE WHEN (taxVariationIndicator = 'Y') THEN exposureCustomerNumber ELSE invoicingCustomerNumber END,'') AS test FROM SCM.schedule";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedConcatenationWithFunction()
   */
  @Override
  protected String expectedConcatenationWithFunction() {
    return "SELECT COALESCE(assetDescriptionLine1,'') || COALESCE(MAX(scheduleStartDate),'') AS test FROM SCM.schedule";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedConcatenationWithMultipleFieldLiterals()
   */
  @Override
  protected String expectedConcatenationWithMultipleFieldLiterals() {
    return "SELECT COALESCE('ABC','') || COALESCE(' ','') || COALESCE('DEF','') AS assetDescription FROM SCM.schedule";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedNestedConcatenations()
   */
  @Override
  protected String expectedNestedConcatenations() {
    return "SELECT COALESCE(field1,'') || COALESCE(COALESCE(field2,'') || COALESCE('XYZ',''),'') AS test FROM SCM.schedule";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSelectWithConcatenation1()
   */
  @Override
  protected String expectedSelectWithConcatenation1() {
    return "SELECT COALESCE(assetDescriptionLine1,'') || COALESCE(' ','') || COALESCE(assetDescriptionLine2,'') AS assetDescription FROM SCM.schedule";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSelectWithConcatenation2()
   */
  @Override
  protected String expectedSelectWithConcatenation2() {
    return "SELECT COALESCE(assetDescriptionLine1,'') || COALESCE('XYZ','') || COALESCE(assetDescriptionLine2,'') AS assetDescription FROM SCM.schedule";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedIsNull()
   */
  @Override
  protected String expectedIsNull() {
    return "COALESCE('A', 'B')";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMathsPlus()
   */
  @Override
  protected String expectedMathsPlus() {
    return "1 + 1";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMathsMinus()
   */
  @Override
  protected String expectedMathsMinus() {
    return "1 - 1";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMathsDivide()
   */
  @Override
  protected String expectedMathsDivide() {
    return "1 / 1";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMathsMultiply()
   */
  @Override
  protected String expectedMathsMultiply() {
    return "1 * 1";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedStringCast()
   */
  @Override
  protected String expectedStringCast() {
    return "CAST(value AS VARCHAR(10))";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedBigIntCast()
   */
  @Override
  protected String expectedBigIntCast() {
    return "CAST(value AS BIGINT)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedBigIntFunctionCast()
   */
  @Override
  protected String expectedBigIntFunctionCast() {
    return "CAST(MIN(value) AS BIGINT)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedBooleanCast()
   */
  @Override
  protected String expectedBooleanCast() {
    return "CAST(value AS SMALLINT)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDateCast()
   */
  @Override
  protected String expectedDateCast() {
    return "CAST(value AS DATE)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDecimalCast()
   */
  @Override
  protected String expectedDecimalCast() {
    return "CAST(value AS DECIMAL(10,2))";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedIntegerCast()
   */
  @Override
  protected String expectedIntegerCast() {
    return "CAST(value AS INTEGER)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedStringLiteralToIntegerCast()
   */
  @Override
  protected String expectedStringLiteralToIntegerCast() {
    return "CAST(" + stringLiteralPrefix() + "'1234567890' AS INTEGER)";
  }


  /**
   * {@inheritDoc}
   *
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSelectWithUnion()
   */
  @Override
  protected String expectedSelectWithUnion() {
    return "SELECT stringField FROM SCM.Other UNION SELECT stringField FROM SCM.Test UNION ALL SELECT stringField FROM SCM.Alternate ORDER BY stringField";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddIntegerColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddIntegerColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN intField_new INTEGER NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterIntegerColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterIntegerColumnStatement() {
    return Arrays.asList("DROP INDEX SCM.Test_1",
                         "ALTER TABLE SCM.Test ALTER COLUMN intField NOT NULL DEFAULT 0",
                         "ALTER TABLE SCM.Test ALTER COLUMN intField DROP DEFAULT",
                         "CREATE INDEX Test_1 ON SCM.Test (intField,floatField)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDateLiteral()
   */
  @Override
  protected String expectedDateLiteral() {
    return "DATE('2010-01-02')";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddStringColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddStringColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN stringField_new VARCHAR(6) NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterStringColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterStringColumnStatement() {
    return Arrays.asList("DROP INDEX SCM.Test_NK",
                          "ALTER TABLE SCM.Test ALTER COLUMN stringField TYPE VARCHAR(6)",
                          "CREATE UNIQUE INDEX Test_NK ON SCM.Test (stringField)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddBooleanColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddBooleanColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN booleanField_new SMALLINT NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterBooleanColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterBooleanColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ALTER COLUMN booleanField NOT NULL DEFAULT 0", "ALTER TABLE SCM.Test ALTER COLUMN booleanField DROP DEFAULT");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddDateColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddDateColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN dateField_new DATE NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterDateColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterDateColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ALTER COLUMN dateField NOT NULL DEFAULT 0", "ALTER TABLE SCM.Test ALTER COLUMN dateField DROP DEFAULT");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddDecimalColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddDecimalColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN floatField_new DECIMAL(6,3) NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterDecimalColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterDecimalColumnStatement() {
    return Arrays.asList("DROP INDEX SCM.Test_1",
      "ALTER TABLE SCM.Test ALTER COLUMN floatField TYPE DECIMAL(14,3)",
      "ALTER TABLE SCM.Test ALTER COLUMN floatField NULL",
      "ALTER TABLE SCM.Test ALTER COLUMN floatField DROP DEFAULT",
      "CREATE INDEX Test_1 ON SCM.Test (intField,floatField)"
      );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddBigIntegerColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddBigIntegerColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN bigIntegerField_new BIGINT NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterBigIntegerColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterBigIntegerColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ALTER COLUMN bigIntegerField DROP DEFAULT",
                         "ALTER TABLE SCM.Test ALTER COLUMN bigIntegerField NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddBlobColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddBlobColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN blobField_new BLOB NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterBlobColumnStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterBlobColumnStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ALTER COLUMN blobField NOT NULL DEFAULT 0", "ALTER TABLE SCM.Test ALTER COLUMN blobField DROP DEFAULT");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddColumnNotNullableStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddColumnNotNullableStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN dateField_new DATE DEFAULT DATE('2010-01-01') NOT NULL");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterColumnFromNullableToNotNullableStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterColumnFromNullableToNotNullableStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ALTER COLUMN dateField NOT NULL DEFAULT 0",
                         "ALTER TABLE SCM.Test ALTER COLUMN dateField DROP DEFAULT");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddColumnWithDefaultStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddColumnWithDefaultStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN floatField_new DECIMAL(6,3) DEFAULT 20.33 NULL","UPDATE Test SET floatField_new = 20.33");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterColumnWithDefaultStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterColumnWithDefaultStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ALTER COLUMN bigIntegerField NOT NULL DEFAULT 54321");
  }

  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableDropColumnWithDefaultStatement()
   */
  @Override
  protected List<String> expectedAlterTableDropColumnWithDefaultStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test DROP COLUMN bigIntegerField","DROP SEQUENCE IF EXISTS SCM.Test_IDS_0");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedChangeIndexFollowedByChangeOfAssociatedColumnStatement()
   */
  @Override
  protected List<String> expectedChangeIndexFollowedByChangeOfAssociatedColumnStatement() {
    return Arrays.asList(
      // dropIndexStatements
      "DROP INDEX SCM.Test_1",
      //Safe drop of index when ever we add a new index
      "DROP INDEX IF EXISTS SCM.Test_1",
      "CREATE INDEX Test_1 ON SCM.Test (intField)",
      // changeColumnStatements
      "ALTER TABLE SCM.Test ALTER COLUMN intField NOT NULL DEFAULT 0",
      "ALTER TABLE SCM.Test ALTER COLUMN intField DROP DEFAULT");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAddIndexStatementsOnSingleColumn()
   */
  @Override
  protected List<String> expectedAddIndexStatementsOnSingleColumn() {
    return Arrays.asList("DROP INDEX IF EXISTS SCM.indexName", "CREATE INDEX indexName ON SCM.Test (id)");
  }


  @Override
  protected String expectedDecimalRepresentationOfLiteral(String literal) {
    int length = literal.length() - 1;
    return String.format("%s", literal, length, length - literal.indexOf("."));
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAddIndexStatementsOnMultipleColumns()
   */
  @Override
  protected List<String> expectedAddIndexStatementsOnMultipleColumns() {
    return Arrays.asList("DROP INDEX IF EXISTS SCM.indexName", "CREATE INDEX indexName ON SCM.Test (id,version)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAddIndexStatementsUnique()
   */
  @Override
  protected List<String> expectedAddIndexStatementsUnique() {
    return Arrays.asList("DROP INDEX IF EXISTS SCM.indexName", "CREATE UNIQUE INDEX indexName ON SCM.Test (id)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterColumnFromNotNullableToNotNullableStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterColumnFromNotNullableToNotNullableStatement() {
    return Arrays.asList("DROP INDEX SCM.Test_1", "ALTER TABLE SCM.Test ALTER COLUMN floatField TYPE DECIMAL(20,3)", "CREATE INDEX Test_1 ON SCM.Test (intField,floatField)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAlterColumnFromNotNullableToNullableStatement()
   */
  @Override
  protected List<String> expectedAlterTableAlterColumnFromNotNullableToNullableStatement() {
    return Arrays.asList("DROP INDEX SCM.Test_1",
      "ALTER TABLE SCM.Test ALTER COLUMN floatField TYPE DECIMAL(20,3)",
      "ALTER TABLE SCM.Test ALTER COLUMN floatField NULL",
      "ALTER TABLE SCM.Test ALTER COLUMN floatField DROP DEFAULT",
      "CREATE INDEX Test_1 ON SCM.Test (intField,floatField)"
      );
  }


  /**
   * Overrides the standard behaviour to ensure that the prepared statement is
   * set up with an integer for booleans
   *
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#verifyBooleanPrepareStatementParameter()
   */
  @Override
  protected void verifyBooleanPrepareStatementParameter() throws SQLException {

    final SqlParameter booleanColumn = parameter(SchemaUtils.column("a", DataType.BOOLEAN));
    BigDecimal nullCheck = null;
    verify(callPrepareStatementParameter(booleanColumn, null)).setObject(any(SqlParameter.class), eq(nullCheck));

    NamedParameterPreparedStatement mockStatement = callPrepareStatementParameter(booleanColumn, "true");
    ArgumentCaptor<Integer>intCapture = ArgumentCaptor.forClass(Integer.class);
    verify(mockStatement).setInt(any(SqlParameter.class), intCapture.capture());
    assertEquals("Integer not correctly set on statement", 1, intCapture.getValue().intValue());

    mockStatement = callPrepareStatementParameter(booleanColumn, "false");
    intCapture = ArgumentCaptor.forClass(Integer.class);
    verify(mockStatement).setInt(any(SqlParameter.class), intCapture.capture());
    assertEquals("Integer not correctly set on statement", 0, intCapture.getValue().intValue());

  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedIndexDropStatements()
   */
  @Override
  protected List<String> expectedIndexDropStatements() {
    return Arrays.asList("DROP INDEX SCM.indexName");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterColumnMakePrimaryStatements()
   */
  @Override
  protected List<String> expectedAlterColumnMakePrimaryStatements() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD PRIMARY KEY (id, dateField)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterPrimaryKeyColumnCompositeKeyStatements()
   */
  @Override
  protected List<String> expectedAlterPrimaryKeyColumnCompositeKeyStatements() {
    return Arrays.asList(
      "DROP INDEX IF EXISTS SCM.\"COMPOSITEPRIMARYKEY..PRIMARY_KEY\"",
      "ALTER TABLE SCM.CompositePrimaryKey ALTER COLUMN secondPrimaryKey TYPE VARCHAR(5)",
      "ALTER TABLE SCM.CompositePrimaryKey ADD PRIMARY KEY (id, secondPrimaryKey)"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterRemoveColumnFromCompositeKeyStatements()
   */
  @Override
  protected List<String> expectedAlterRemoveColumnFromCompositeKeyStatements() {
    return Arrays.asList(
      "DROP INDEX IF EXISTS SCM.\"COMPOSITEPRIMARYKEY..PRIMARY_KEY\"",
      "ALTER TABLE SCM.CompositePrimaryKey ALTER COLUMN secondPrimaryKey TYPE VARCHAR(5)",
      "ALTER TABLE SCM.CompositePrimaryKey ALTER COLUMN secondPrimaryKey NULL",
      "ALTER TABLE SCM.CompositePrimaryKey ALTER COLUMN secondPrimaryKey DROP DEFAULT",
      "ALTER TABLE SCM.CompositePrimaryKey ADD PRIMARY KEY (id)"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterPrimaryKeyColumnStatements()
   */
  @Override
  protected List<String> expectedAlterPrimaryKeyColumnStatements() {
    return Arrays.asList(
      "DROP INDEX IF EXISTS SCM.\"TEST..PRIMARY_KEY\"",
      "ALTER TABLE SCM.Test RENAME COLUMN id TO renamedId",
      "ALTER TABLE SCM.Test ADD PRIMARY KEY (renamedId)"
      );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterColumnRenamingAndChangingNullability()
   */
  @Override
  protected List<String> expectedAlterColumnRenamingAndChangingNullability() {
    return Arrays.asList("ALTER TABLE SCM.Other RENAME COLUMN floatField TO blahField",
                         "ALTER TABLE SCM.Other ALTER COLUMN blahField TYPE DECIMAL(20,3)",
                         "ALTER TABLE SCM.Other ALTER COLUMN blahField NULL",
                         "ALTER TABLE SCM.Other ALTER COLUMN blahField DROP DEFAULT");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterColumnChangingLengthAndCase()
   */
  @Override
  protected List<String> expectedAlterColumnChangingLengthAndCase() {
    return Arrays.asList("ALTER TABLE SCM.Other RENAME COLUMN floatField TO FloatField",
      "ALTER TABLE SCM.Other ALTER COLUMN FloatField TYPE DECIMAL(20,3)");
  }


  /**
   * It is only necessary to cast for HSQLDB. Returns the value without casting.
   *
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#varCharCast(java.lang.String)
   */
  @Override
  protected String varCharCast(String value) {
    return value;
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterTableAddStringColumnWithDefaultStatement()
   */
  @Override
  protected List<String> expectedAlterTableAddStringColumnWithDefaultStatement() {
    return Arrays.asList("ALTER TABLE SCM.Test ADD COLUMN stringField_with_default VARCHAR(6) DEFAULT 'N' NOT NULL");
  }


  /**
   * {@inheritDoc}
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAutonumberUpdate()
   */
  @Override
  protected List<String> expectedAutonumberUpdate() {
    return Arrays.asList("INSERT INTO SCM.Autonumber (id, value) VALUES('TestTable', (SELECT COALESCE(MAX(id) + 1, 1)  AS CurrentValue FROM SCM.TestTable)) ON DUPLICATE KEY UPDATE nextValue = GREATEST(nextValue, VALUES(nextValue))");
  }


  /**
   * {@inheritDoc}
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedUpdateWithSelectMinimum()
   */
  @Override
  protected String expectedUpdateWithSelectMinimum() {
    String value1 = varCharCast("'S'");
    String value2 = varCharCast("'Y'");
    return "UPDATE " + tableName("Other") + " O SET intField = (SELECT MIN(intField) FROM " + tableName("Test") + " T WHERE ((T.charField = " + stringLiteralPrefix() + value1 + ") AND (T.stringField = O.stringField) AND (T.intField = O.intField))) WHERE (stringField = " + stringLiteralPrefix() + value2 + ")";
  }


  /**
   * {@inheritDoc}
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedUpdateUsingAliasedDestinationTable()
   */
  @Override
  protected String expectedUpdateUsingAliasedDestinationTable() {
    return "UPDATE " + tableName("FloatingRateRate") + " A SET settlementFrequency = (SELECT settlementFrequency FROM " + tableName("FloatingRateDetail") + " B WHERE (A.floatingRateDetailId = B.id))";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedYYYYMMDDToDate()
   */
  @Override
  protected String expectedYYYYMMDDToDate() {
    return "DATE_FROM_STR('20100101', 'yyyyMMdd')";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDateToYyyymmdd()
   */
  @Override
  protected String expectedDateToYyyymmdd() {
    return "CAST(DATE_TO_STR(testField, 'yyyyMMdd') AS DECIMAL(8))";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDateToYyyymmddHHmmss()
   */
  @Override
  protected String expectedDateToYyyymmddHHmmss() {
    return "CAST(DATE_TO_STR(testField, 'yyyyMMddHHmmss') AS DECIMAL(14))";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedNow()
   */
  @Override
  protected String expectedNow() {
    return "CURRENT_TIMESTAMP()";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDropViewStatement()
   */
  @Override
  protected List<String> expectedDropViewStatements() {
    return Arrays.asList("DROP VIEW " + tableName("TestView") + " IF EXISTS CASCADE") ;
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSubstring()
   */
  @Override
  protected String expectedSubstring() {
    return "SELECT SUBSTRING(field1, 1, 3) FROM " + tableName("schedule");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedDaysBetween()
   */
  @Override
  protected String expectedDaysBetween() {
    return "SELECT DATEDIFF(DAY,DATE_TO_STR(dateOne, 'yyyy-MM-dd'), DATE_TO_STR(dateTwo, 'yyyy-MM-dd')) FROM SCM.MyTable";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAutonumberUpdateForNonIdColumn()
   */
  @Override
  protected List<String> expectedAutonumberUpdateForNonIdColumn() {
    return Arrays.asList("INSERT INTO SCM.Autonumber (id, value) VALUES('TestTable', (SELECT COALESCE(MAX(generatedColumn) + 1, 1)  AS CurrentValue FROM SCM.TestTable)) ON DUPLICATE KEY UPDATE nextValue = GREATEST(nextValue, VALUES(nextValue))");
  }


  @Override
  protected String expectedLeftPad() {
    return "SELECT CASE WHEN 10 - LENGTH(CAST(stringField AS STRING)) > 0 THEN SUBSTRING(REPLACE('                    ', ' ', 'j'), 1, 10 - LENGTH(CAST(stringField AS STRING))) || stringField ELSE SUBSTRING(stringField, 1, 10) END FROM SCM.Test";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedStringFunctionCast()
   */
  @Override
  protected String expectedStringFunctionCast() {
    return "CAST(MIN(field) AS VARCHAR(8))";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMergeSimple()
   */
  @Override
  protected String expectedMergeSimple() {
    return "INSERT INTO SCM.foo(id, bar)"
        + " SELECT somewhere.newId AS id, somewhere.newBar AS bar FROM SCM.somewhere"
        + " ON DUPLICATE KEY UPDATE bar = values(bar)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMergeComplex()
   */
  @Override
  protected String expectedMergeComplex() {
    return "INSERT INTO SCM.foo(id, bar)"
        + " SELECT somewhere.newId AS id, join.joinBar AS bar FROM SCM.somewhere INNER JOIN SCM.join ON (somewhere.newId = join.joinId)"
        + " ON DUPLICATE KEY UPDATE bar = values(bar)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMergeTargetInDifferentSchema()
   */
  @Override
  protected String expectedMergeTargetInDifferentSchema() {
    return "INSERT INTO MYSCHEMA.foo(id, bar)"
        + " SELECT somewhere.newId AS id, somewhere.newBar AS bar FROM SCM.somewhere"
        + " ON DUPLICATE KEY UPDATE bar = values(bar)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMergeSourceInDifferentSchema()
   */
  @Override
  protected String expectedMergeSourceInDifferentSchema() {
    return "INSERT INTO SCM.foo(id, bar)"
        + " SELECT somewhere.newId AS id, somewhere.newBar AS bar FROM MYSCHEMA.somewhere"
        + " ON DUPLICATE KEY UPDATE bar = values(bar)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMergeForAllPrimaryKeys()
   */
  @Override
  protected String expectedMergeForAllPrimaryKeys() {
    return "INSERT INTO SCM.foo(id)"
        + " SELECT somewhere.newId AS id FROM SCM.somewhere"
        + " ON DUPLICATE KEY SKIP";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedMergeWithUpdateExpressions()
   */
  @Override
  protected String expectedMergeWithUpdateExpressions() {
    return "INSERT INTO SCM.foo(id, bar)"
        + " SELECT somewhere.newId AS id, somewhere.newBar AS bar FROM SCM.somewhere"
        + " ON DUPLICATE KEY UPDATE bar = values(bar) + foo.bar";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAddDays()
   */
  @Override
  protected String expectedAddDays() {
    return "DATE_ADD(testField, INTERVAL -20 DAY)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAddMonths()
   */
  @Override
  protected String expectedAddMonths() {
    return "DATE_ADD(testField, INTERVAL -3 MONTH)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAlterRemoveColumnFromSimpleKeyStatements()
   */
  @Override
  protected List<String> expectedAlterRemoveColumnFromSimpleKeyStatements() {
    return Arrays.asList("DROP INDEX IF EXISTS SCM.\"TEST..PRIMARY_KEY\"",
                         "ALTER TABLE SCM.Test DROP COLUMN id",
                         "DROP SEQUENCE IF EXISTS SCM.Test_IDS_0");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedRenameTableStatements()
   */
  @Override
  protected List<String> expectedRenameTableStatements() {
    return ImmutableList.of("DROP INDEX IF EXISTS SCM.\"TEST..PRIMARY_KEY\"",
                            "ALTER TABLE SCM.Test RENAME TO SCM.Renamed",
                            "ALTER TABLE SCM.Renamed ADD PRIMARY KEY (id)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#getRenamingTableWithLongNameStatements()
   */
  @Override
  protected List<String> getRenamingTableWithLongNameStatements() {
    return ImmutableList.of("DROP INDEX IF EXISTS SCM.\"123456789012345678901234567890XXX..PRIMARY_KEY\"", "ALTER TABLE SCM.123456789012345678901234567890XXX RENAME TO SCM.Blah","ALTER TABLE SCM.Blah ADD PRIMARY KEY (id)");
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedRenameIndexStatements()
   */
  @Override
  protected List<String> expectedRenameIndexStatements() {
    return ImmutableList.of(
      "DROP INDEX SCM.Test_1",
      "CREATE INDEX Test_2 ON SCM.Test (intField,floatField)"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedRenameIndexStatements()
   */
  @Override
  protected List<String> expectedRenameTempIndexStatements() {
    return ImmutableList.of(
      "DROP INDEX TempTest_1",
      "CREATE INDEX TempTest_2 ON TEMP_TempTest (intField,floatField)" // no schema name as temporary
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedRandomString()
   */
  @Override
  protected String expectedRandomString() {
    return "SUBSTRING(CAST(RAND() AS STRING), 3, 10)";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSelectOrderByNullsLast()
   */
  @Override
  protected String expectedSelectOrderByNullsLast() {
    return "SELECT stringField FROM " + tableName("Alternate") + " ORDER BY stringField IS NULL, stringField";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSelectOrderByNullsFirstDesc()
   */
  @Override
  protected String expectedSelectOrderByNullsFirstDesc() {
    return "SELECT stringField FROM " + tableName("Alternate") + " ORDER BY stringField IS NOT NULL, stringField DESC";
  }


  /**
   * @return Expected SQL for {@link #testSelectOrderByTwoFields()}
   */
  @Override
  protected String expectedSelectOrderByTwoFields() {
    return "SELECT stringField1, stringField2 FROM " + tableName("Alternate") + " ORDER BY stringField1 IS NOT NULL, stringField1 DESC, stringField2 IS NULL, stringField2";
  }


  /**
   * @return Expected SQL for {@link #testSelectOrderByTwoFields()}
   */
  @Override
  protected String expectedSelectFirstOrderByNullsLastDesc() {
    return "SELECT stringField FROM " + tableName("Alternate") + " ORDER BY stringField IS NULL, stringField DESC LIMIT 0,1";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedSelectLiteralWithWhereClauseString()
   */
  @Override
  protected String expectedSelectLiteralWithWhereClauseString() {
    return "SELECT 'LITERAL' FROM dual  WHERE ('ONE' = 'ONE')";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAddTableFromStatements()
   */
  @Override
  protected List<String> expectedAddTableFromStatements() {
    return ImmutableList.of(
      "CREATE TABLE SCM.SomeTable (someField VARCHAR(3) NOT NULL, otherField DECIMAL(3,0) NOT NULL, PRIMARY KEY (someField))",
      "DROP INDEX IF EXISTS SCM.SomeTable_1",
      "CREATE INDEX SomeTable_1 ON SCM.SomeTable (otherField)",
      "INSERT INTO SCM.SomeTable SELECT someField, otherField FROM SCM.OtherTable"
    );
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedHints1(int)
   */
  @Override
  protected String expectedHints1(int rowCount) {
    return "SELECT /*+ ORDERED, USE_INDEX(SCHEMA2.Foo, Foo_1), USE_INDEX(aliased, Foo_2) */ * FROM SCHEMA2.Foo INNER JOIN SCM.Bar ON (a = b) LEFT OUTER JOIN SCM.Fo ON (a = b) INNER JOIN SCM.Fum Fumble ON (a = b) ORDER BY a";
  }

  /**
   * @return The expected SQL for the {@link SelectStatement#optimiseForRowCount(int)} directive.
   */
  @Override
  protected String expectedHints2(int rowCount) {
    return "SELECT /*+ USE_INDEX(SCM.Foo, Foo_1), ORDERED */ a, b FROM " + tableName("Foo") + " ORDER BY a FOR UPDATE";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#supportsWindowFunctions()
   */
  @Override
  protected boolean supportsWindowFunctions() {
    return true;
  }


  /**
   * No need for an escape on MySQL
   */
  @Override
  protected String likeEscapeSuffix() {
    return "";
  }


  /**
   * @see org.alfasoftware.morf.jdbc.AbstractSqlDialectTest#expectedAnalyseTableSql()
   */
  @Override
  protected Collection<String> expectedAnalyseTableSql() {
    return SqlDialect.NO_STATEMENTS;
  }


  /**
   * @return The expected SQL for a delete statement with a limit and where criterion.
   */
  @Override
  protected String expectedDeleteWithLimitAndWhere(String value) {
    return "DELETE FROM " + tableName(TEST_TABLE) + " WHERE (Test.stringField = " + stringLiteralPrefix() + value + ") LIMIT 1000";
  }


  /**
   * @return The expected SQL for a delete statement with a limit and where criterion.
   */
  @Override
  protected String expectedDeleteWithLimitAndComplexWhere(String value1, String value2) {
    return "DELETE FROM " + tableName(TEST_TABLE) + " WHERE ((Test.stringField = " + stringLiteralPrefix() + value1 + ") OR (Test.stringField = " + stringLiteralPrefix() + value2 + ")) LIMIT 1000";
  }


  /**
   * @return The expected SQL for a delete statement with a limit and where criterion.
   */
  @Override
  protected String expectedDeleteWithLimitWithoutWhere() {
    return "DELETE FROM " + tableName(TEST_TABLE) + " LIMIT 1000";
  }
}
